#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\begin_preamble

\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package none
\inputencoding iso8859-15
\fontencoding default
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 2
\use_package amssymb 0
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\series bold
Programming 2 Assignment
\end_layout

\begin_layout Author
Gerald Hu, Aaron Skouby 
\begin_inset Newline newline
\end_inset

 
\begin_inset Newline newline
\end_inset

 CSCE 221-200
\end_layout

\begin_layout Date
March 11, 2016
\end_layout

\begin_layout Section*
Introduction
\end_layout

\begin_layout Standard
The purpose of this assignment was to further understanding of data structures
 and implementations that were discussed in class.
 Specifically, the project explored implementing a map ADT using a binary
 tree.
 The performance of the operations of the map were analayzed for both a
 normal binary tree implementation and an AVL binary tree implementation.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Section*
Implementation Details
\end_layout

\begin_layout Standard
The map was implemented with a binary search tree, using the AVL method
 of self-balancing.
 The tree had node data members, a size_t 
\begin_inset Quotes eld
\end_inset

sz
\begin_inset Quotes erd
\end_inset

 which kept track of the size of the tree, special 
\begin_inset Quotes eld
\end_inset

leaf
\begin_inset Quotes erd
\end_inset

 nodes at the end of each branch (null pointers), and a special 
\begin_inset Quotes eld
\end_inset

superroot
\begin_inset Quotes erd
\end_inset

 node whose left subtree was the main tree (this superroot's parent was
 null).
 Each node of the tree stored pointers to its parent, left child, and right
 child, as well as storing a pair called 
\begin_inset Quotes eld
\end_inset

value
\begin_inset Quotes erd
\end_inset

.
 This pair was the main data element of the node, storing the key/index
 in its first position, and the data value in its second position; pair
 used the standard template library.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\noindent
The map had two erase functions, one which took a key, one which took an
 iterator for position.
 These would take a key or iterator and find the desired node, and would
 get a pointer to it.
 Then, it would pass the node pointer to a helper function eraser(node*
 n), which would find the node (or otherwise do nothing), remove it, place
 the child in the proper position, and return the next in-order node.
 Insert functions were implemented similarly--two insert functions, one
 taking a key, one taking an iterator, and both being based on a helper
 function inserter.
 The inserter function would take a key and value, and would either construct
 a new node and add it to the map; or, in the case where the key already
 existed in a map, replace that key's value with the new value.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\noindent
The map's size was automatically adjusted by the helper functions eraser()
 and inserter() when needed.
 Both eraser() and inserter() called rebalance() to fix tree imbalances
 after doing their respective operation.
 Rebalance() would scan up the tree to find imbalances, and call the restructure
() function on them, making appropriate left or right rotations.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\noindent
Timing.cpp was essentially unchanged from the code provided by the instructors.
 The timing function was already implemented, and for the most part our
 tests simply changed the parameters of the function.
 This timing function relies on high_resolution_clock; given a map and a
 number, the function would repeatedly push random elements into the map
 the specified number of times.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Section*
Theoretical Analysis
\end_layout

\begin_layout Standard
Insert and erase operations on a simple binary search tree: insert's worst
 case happens when the proper place to insert the node or the node to be
 erased is at the bottom of the tree, which means that the function must
 traverse the entire tree's height.
 The tree's height can change, varying from O(log(n)) to O(n), but the insert
 function will always depend on the height.
 Then we say the insert and erase functions are O(height).
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\noindent
Insert and erase operations on an AVL tree: here, we can set a logarithmic
 bound on the height of the tree.
 First, we state a function n(h), the minimum number of internal nodes of
 an AVL tree with height h.
 Then, we note that every AVL tree contains a root node, a subtree of height
 h-1, and a subtree of height h-2.
 Then n(h) for the tree is 
\begin_inset Formula $1+n(h-1)+n(h-2)>2n(h-2)$
\end_inset

, and so 
\begin_inset Formula $n(h)>2n(h-2)$
\end_inset

.
 We can use the definition of the n(h) function to substitute 
\begin_inset Formula $2n(h-2)$
\end_inset

 with 4n(h-4), and keep going, until we see a general pattern that 
\begin_inset Formula $n(h)>2^{i}n(h-2i)$
\end_inset

.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\noindent
We evaluate this for the base case n(1)=1, an AVL tree with height 1, solving
 for i.
 We get that 
\begin_inset Formula $i=(\frac{h}{2}-1)$
\end_inset

, so 
\begin_inset Formula $n(h)>2^{\frac{h}{2}-1}$
\end_inset

, which comes to 
\begin_inset Formula $h<2(log(n(h)))+2$
\end_inset

, which is logarithmic behavior.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\noindent
Rebalancing son an AVL tree: our tree used a linked-node implementation.
 A single restructure is O(1), and is simply reassigning pointers between
 nodes.
 As rebalance() travels up the entire tree's height (which was stated earlier
 to be log(n)), then the cumulative restructure is O(1)*O(log(n)) = O(log(n)).
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Section*
Experimental Setup
\end_layout

\begin_layout Standard
Timing tests were conducted using the provided timing.cpp, compiled with
 the provided makefile's commands.
 Compilation was done on the 
\begin_inset Quotes eld
\end_inset

linux.cse.tamu.edu
\begin_inset Quotes erd
\end_inset

 server, with G++ version 4.7.3 (SUSE Linux) (found via g++ --version).
 Compilation was set to the C++11 standard, with the -G flag enabled and
 O2 optimization level, warnings set to -Wall -Werror (all warnings treated
 as compilation errors), and dependencies flagged with -MMD (auto-generate
 dependencies).
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\noindent
Tests were run on the 
\begin_inset Quotes eld
\end_inset

compute.cse.tamu.edu
\begin_inset Quotes erd
\end_inset

 server, which runs Arch Linux x86_64 version 8.12 (found via arch --version
 and lsb_release -a).
 This server has 99026668 total kilobytes of RAM (found via free).
 It uses Intel Core i7-3970X CPUs (2 sockets, 8 cores per socket, 2 threads
 per core), with a clock speed of 2000 mHz (found via lscpu).
 Each core has a Xeon E5-2650 processor (found via lshw --short).
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\noindent
Timing functions output timings for input sizes that were powers of 2, starting
 from 2 itself, and ending at a maximum size specified by the user.
 Each step of the timing was repeated 10 times, and the average of each
 result taken.
 Linear height n inserts went up to a maximum input size of 32768; logarithmic
 height n inserts went up to a maximum input size of 4194304, and random
 n inserts went up to a maximum input size of 1048576.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\noindent
We ran timing.o twice, first on a tree with AVL rebalancing, and then on
 a simpler binary tree with no rebalancing method, and compared the performance
 of the two trees.
\end_layout

\begin_layout Section*
Results and Discussion
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename report/Linear_Time_Per_(Binary).jpg
	width 11cm

\end_inset

 
\begin_inset Caption Standard

\begin_layout Plain Layout
Graph of the Time Taken per Addition for Different Input Sizes for a Linear
 Order Added Binary Search Tree
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:Linear_Time_Per_Binary"

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename report/Linear_Time_Per_(AVL).jpg
	width 11cm

\end_inset

 
\begin_inset Caption Standard

\begin_layout Plain Layout
Graph of the Time Taken for Different Input Sizes for a Linear Order Added
 AVL Tree
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:Linear_Time_Per_AVL"

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename report/Linear_Big_O_(Binary).jpg
	width 11cm

\end_inset

 
\begin_inset Caption Standard

\begin_layout Plain Layout
Graph of the Big O Constants for Different Input Sizes for a Linear Order
 Added Binary Search Tree
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:Linear_Big_O_Binary"

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename report/Linear_Big_O_(AVL).jpg
	width 11cm

\end_inset

 
\begin_inset Caption Standard

\begin_layout Plain Layout
Graph of the Big O Constants for Different Input Sizes for a Linear Order
 Added AVL Tree
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:Linear_Big_O_AVL"

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename report/Logarithmic_Time_Per_(Binary).jpg
	width 11cm

\end_inset

 
\begin_inset Caption Standard

\begin_layout Plain Layout
Graph of the Time Taken per Addition for Different Input Sizes for a Logarithmic
 Order Added Binary Search Tree
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:Logarithmic_Time_Per_Binary"

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename report/Logarithmic_Time_Per_(AVL).jpg
	width 11cm

\end_inset

 
\begin_inset Caption Standard

\begin_layout Plain Layout
Graph of the Time Taken for Different Input Sizes for a Logarithmic Order
 Added AVL Tree
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:Logarithmic_Time_Per_AVL"

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename report/Logarithmic_Big_O_(Binary).jpg
	width 11cm

\end_inset

 
\begin_inset Caption Standard

\begin_layout Plain Layout
Graph of the Big O Constants for Different Input Sizes for a Logarithmic
 Order Added Binary Search Tree
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:Logarithmic_Big_O_Binary"

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename report/Logarithmic_Big_O_(AVL).jpg
	width 11cm

\end_inset

 
\begin_inset Caption Standard

\begin_layout Plain Layout
Graph of the Big O Constants for Different Input Sizes for a Logarithmic
 Order Added AVL Tree
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:Logarithmic_Big_O_AVL"

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename report/Random_Time_Per_(Binary).jpg
	width 11cm

\end_inset

 
\begin_inset Caption Standard

\begin_layout Plain Layout
Graph of the Time Taken per Addition for Different Input Sizes for a Random
 Order Added Binary Search Tree
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:Random_Time_Per_Binary"

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename report/Random_Time_Per_(AVL).jpg
	width 11cm

\end_inset

 
\begin_inset Caption Standard

\begin_layout Plain Layout
Graph of the Time Taken for Different Input Sizes for a Random Order Added
 AVL Tree
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:Random_Time_Per_AVL"

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename report/Random_Big_O_(Binary).jpg
	width 11cm

\end_inset

 
\begin_inset Caption Standard

\begin_layout Plain Layout
Graph of the Big O Constants for Different Input Sizes for a Random Order
 Added Binary Search Tree
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:Random_Big_O_Binary"

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename report/Random_Big_O_(AVL).jpg
	width 11cm

\end_inset

 
\begin_inset Caption Standard

\begin_layout Plain Layout
Graph of the Big O Constants for Different Input Sizes for a Random Order
 Added AVL Tree
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:Random_Big_O_AVL"

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Conclusion
\end_layout

\end_body
\end_document
